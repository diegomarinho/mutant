buildscript {
	ext {
		springBootVersion  = '2.0.5.RELEASE'
        asciidoctorVersion = '1.5.7'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:$asciidoctorVersion"
	}
}

plugins {
    id "com.github.spotbugs" version "1.6.4"
    id "org.asciidoctor.convert" version "1.5.7"
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'br.com.dma'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 10

repositories {
	mavenCentral()
}

dependencies {
	implementation('org.springframework.boot:spring-boot-starter-actuator')
	implementation('org.springframework.boot:spring-boot-starter-data-mongodb-reactive')
	implementation('org.springframework.boot:spring-boot-starter-webflux')
	compileOnly('org.projectlombok:lombok')
    compile('org.codehaus.groovy:groovy-all:2.4.12')
    testCompile('org.spockframework:spock-core:1.2-groovy-2.4')
    testCompile('org.spockframework:spock-spring:1.2-groovy-2.4')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
	testImplementation('de.flapdoodle.embed:de.flapdoodle.embed.mongo:2.1.1')
	testImplementation('io.projectreactor:reactor-test')
}

task spotbugs(
    group: "Verification",
    description: "Marker task to enabled spotbugs."
)

spotbugs {
    toolVersion = '3.1.7'
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    tasks.spotbugsMain.onlyIf {
        taskGraph.hasTask((tasks.spotbugs))
    }
    tasks.spotbugsTest.onlyIf {
        taskGraph.hasTask((tasks.spotbugs))
    }
}

ext {
    snippetsDir = file('build/snippets')
}

asciidoctor {
    attributes 'snippets': snippetsDir
    sourceDir 'src/main/asciidoc'
    outputDir "build/asciidoc"
    inputs.dir snippetsDir
}

bootJar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

task copyRestDocs(type: Copy) {
    dependsOn asciidoctor
    from "${asciidoctor.outputDir}/html5"
    into "${project.buildDir}/resources/main/static/docs"
}

bootRun {
    dependsOn copyRestDocs
}